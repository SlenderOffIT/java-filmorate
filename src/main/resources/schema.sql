drop table if exists FILM, "USER", GENRE_FILM, GENRE, RATING_MPA, LIKE_FILM, FRIENDS, DIRECTORS, FILMS_DIRECTORS,
REVIEWS, REVIEW_LIKES,  FEED;

CREATE TABLE IF NOT EXISTS GENRE (
	id_genre integer generated by default as identity not null primary key,
	name_genre varchar(128) NOT NULL
);

CREATE TABLE IF NOT EXISTS RATING_MPA (
	id_rating_mpa integer generated by default as identity not null primary key,
	name_mpa varchar(5) not null
);

CREATE TABLE if not exists DIRECTORS (
    director_id integer generated by default as identity primary key,
    director_name varchar(255) not null
);

CREATE TABLE IF NOT EXISTS FILM (
	id integer generated by default as identity not null primary key,
	rate integer,
	duration integer NOT NULL,
	name varchar(150) NOT NULL,
	description varchar(600),
	release_date TIMESTAMP NOT NULL,
	mpa integer not null references RATING_MPA (id_rating_mpa) on DELETE cascade on update cascade
);

CREATE TABLE IF NOT EXISTS "USER" (
	id integer generated by default as identity not null primary key,
	name varchar(100),
	email varchar(100) NOT NULL,
	login varchar(50) NOT NULL,
	birthday TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS LIKE_FILM (
	id_film integer not null references film (id) on delete cascade on UPDATE cascade,
	id_user integer not null references "USER" (id) on delete cascade on UPDATE cascade,
	PRIMARY KEY (id_film, id_user)
);

CREATE TABLE IF NOT EXISTS GENRE_FILM (
	id_film integer not null references FILM (id) on delete cascade on UPDATE cascade,
	id_genre integer not null references GENRE (id_genre) on delete cascade on UPDATE cascade,
    PRIMARY KEY (id_film, id_genre)
);

CREATE TABLE if not exists FILMS_DIRECTORS (
    film_id  integer not null references film (id) on delete cascade,
    director_id integer not null references directors (director_id) on delete cascade,
    primary key (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS FRIENDS (
	id_user integer not null references "USER" (id) on delete cascade on UPDATE cascade,
	id_friend integer not null references "USER" (id) on delete cascade on UPDATE cascade,
    PRIMARY KEY (id_user, id_friend)
);

CREATE TABLE if not exists REVIEWS (
    review_id       integer generated by default as identity not null primary key,
    content varchar(255) not null,
    is_positive boolean not null,
    user_id    integer not null references "USER" (id) on delete cascade,
    film_id    integer not null references FILM (id) on delete cascade,
    useful integer
);

CREATE TABLE if not exists REVIEW_LIKES (
    user_id integer not null references "USER" (id) on delete cascade,
    review_id integer not null references reviews (review_id) on delete cascade,
    is_positive boolean not null,
    primary key (user_id, review_id)
);

create table if not exists FEED (
    FEED_TIMESTAMP  timestamp         not null,
    user_id    integer                not null,
    event_type CHARACTER VARYING(10)  not null,
    operation  CHARACTER VARYING(10)  not null,
    event_id   integer auto_increment not null,
    entity_id  integer                not null,
    FOREIGN KEY (user_id) REFERENCES "USER" (id) on delete cascade
);
